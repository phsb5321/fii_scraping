# Docker Compose file for running an application stack with Nest.js, MySQL, and Redis
version: "3.9"

services:
  # Nest.js application service
  app:
    image: node:19 # Use Node.js 19 as the base image
    working_dir: /app # Set the working directory inside the container
    container_name: nestjs # Name of the container
    volumes:
      - .:/app # Mount the current directory on the host to /app in the container
    ports:
      - 4000:3000 # Map the host port 3000 to the container port 3000
      - 3500:3500 # Map the host port 3500 to the container port 3500
    command: sh -c "npm install -g pnpm && pnpm install && pnpm run start:dev"
    depends_on:
      - db # Ensure the db service is started before the app service
    networks:
      - db # Connect the app service to the db network

  # MySQL database service
  db:
    image: mysql # Use the MySQL image
    container_name: mysql # Name of the container
    command: --default-authentication-plugin=mysql_native_password # Set the default authentication plugin (not recommended for production)
    restart: "on-failure" # Disable automatic restart (options: "no", "always", "on-failure", "unless-stopped")
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - 3306:3306 # Map the host port 3306 to the container port 3306
    networks:
      - db # Connect the db service to the db network

  # Redis cache service
  cache:
    image: redis/redis-stack:latest # Use the Redis image
    container_name: redis # Name of the container
    restart: "on-failure" # Disable automatic restart (options: "no", "always", "on-failure", "unless-stopped")
    ports:
      - "6379:6379" # Map the host port 6379 to the container port 6379
      - "8001:8001" # Map the host port 8001 to the container port 8001
    command: redis-server --requirepass example # Set the Redis password
    volumes:
      - cache:/data # Mount the named volume "cache" to /data in the container
    networks:
      - db # Connect the cache service to the db network

# Networks used in the services
networks:
  db:
    driver: bridge # Use the bridge network driver for the db network

# Volumes used in the services
volumes:
  cache:
    driver: local # Use the local volume driver for the cache volume
