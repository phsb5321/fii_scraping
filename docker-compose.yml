# Docker Compose file for running an application stack with Nest.js, MySQL, and Redis
#
# This file defines services, networks and volumes that can be used to
# spin up our microservice-based application with docker compose.
# Every service represents a container which the Docker daemon automatically
# manages the lifecycle of.
#
# Outline:
# 1) Services
#   - Application server (Nest.js)
#   - Main database server (PostgreSQL)
#   - Test database server (PostgreSQL)
#
# 2) Networks
#   - Main network for database (Bridge driver)
#   - Test network for database (Bridge driver)
#
# 3) Volumes
#   - Cache

version: '3.9'

# All services our application relies on
services:
  # The Nest.js application service
  app:
    image: node:19 # The base Docker image, Node version 19 here.
    working_dir: /app # Defines the working directory for instructions that follow in the Dockerfile.
    container_name: nestjs # Assign a name to the container.
    volumes:
      - .:/app # Map the code inside the docker to the local development folder.
    ports:
      - 3000:3000 # Expose and map port 3000 of the Docker host to port 3000 in the Docker container.
      - 3500:3500 # Expose and map port 3500 of the Docker host to port 3500 in the Docker container.
    # The command that starts the Nest.js application
    command: >
      sh -c "npm install -g pnpm &&
            pnpm install &&
            npx prisma migrate deploy &&
            pnpm run start:dev"
    depends_on:
      - database # Ensure the database service starts before app service.
    networks:
      - database # App service's connection to database network

  # Main PostgreSQL database service to be used by application
  database:
    image: postgres:latest # Use the Docker image for the latest version of PostgreSQL
    container_name: postgres # Assign a name to the container.
    restart: 'on-failure' # Policy for when to restart the container
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # PostgreSQL superuser password
      POSTGRES_DB: ${POSTGRES_DB} # Name of database
    ports:
      - 5432:5432 # Bridge host port 5432 to PostgreSQL port 5432
    networks:
      - database # Database service's connection to database network

  # Separate PostgreSQL database service for running integration tests to prevent clashing with main database
  test_database:
    image: postgres:latest # Use the Docker image for the latest version of PostgreSQL
    container_name: postgres_test # Assign a name to the container.
    restart: 'on-failure' # Policy for when to restart the container
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # PostgreSQL superuser password
      POSTGRES_DB: ${POSTGRES_DB} # Name of database
    ports:
      - 5433:5432 # Bridge host port 5433 to PostgreSQL port 5432 for test database
    networks:
      - database_test # Test Database service's connection to test database network

networks: # Networks that can be shared by multiple services
  # Network for the main database. By default, all containers connected to the same network can communicate with each other.
  database:
    driver: bridge # Use the default bridge network
  # Network for the test database
  database_test:
    driver: bridge

# To persist data across container restarts, Docker provides volumes.
volumes:
  # Local driver means the data will persist on the host machine at /var/lib/docker/volumes/
  cache:
    driver: local
